	#!/usr/bin/env perl
	#!/usr/bin/perl 

	use strict;
	use warnings;
	use Getopt::Long;
	no warnings ('uninitialized', 'substr');
	my $RutaRelativa= "";
	my $trim5p= "";
	my $trim3p= "";
	my $FileIn="";
	my $cont=0;
	my $trimSeq="";
	my $plus="";
	my $Quality="";
	my $seq="";
	my %Unique;
	my %Complexivity;
	my $FileOut="";
	GetOptions( "Ruta=s" => \$RutaRelativa,
				"5p=i" => \$trim5p,
				"3p=i" => \$trim3p,
				"FileIn=s" => \$FileIn,
				"FileOut=s" => \$FileOut);

    if(!$RutaRelativa){$RutaRelativa=".";}
    if(!$trim5p){$trim5p=0;}
    if(!$trim3p){$trim3p=0;}
     if(!$FileOut){$FileOut="$RutaRelativa/FILECLEAN";}
	open(INFASTAQ,"$FileIn") || die "Not able to read $FileIn : $!\n";
	open(OUTFASTAQ, ">$FileOut") || die "Not able to create File.clean : $!\n";
	open(OUTREPORT, ">$RutaRelativa/filter/Trimm.lane.report.unique") || die "Not able to create File.clean : $!\n";
	open(OUTCOMPLEXIVITY, ">$RutaRelativa/filter/Trimm.lane.report.complexity") || die "Not able to create File.clean : $!\n";
	print STDERR "Using \".\" for 10K Line, and Line for Millon\n";
	while(<INFASTAQ>){
	chomp;
	$cont++;
	if(!($cont%10000))
	{
		print STDERR ".";
		if(!($cont%1000000))
	{
		print STDERR "\nLine Millon\n";
	}
	}
	my @Header;
	my $i=0;
	my $max=0;
	if($_ =~ /^(\>)/ || $_ =~ /^(\@)/ )
	{
	print OUTFASTAQ "$_\n";
	$_=~s/w//;
	$_=~s/t//;
	@Header=split(/_/,$_);
	$Unique{$Header[2]}++;
	if($Header[1] gt $max){$max=$Header[1];}
			for($i=0;$i<=$max;$i+=10)
			{
				if($Header[1] ge $i && $Header[1] le $i+9)
				{
				$Complexivity{$i."-".($i+9)}{$Header[2]}++;
				}
			}
			
	}
	chomp($seq=<INFASTAQ>);
	if($seq=~ /^[a-zA-Z]*$/)
	{
		if($trim5p >0 && $trim3p >0)
		{
	 $seq = substr($seq, $trim5p);   
	 $seq = substr($seq, 0, -$trim3p) unless $trim3p == 0;
		}
	 print OUTFASTAQ "$seq\n";
	}
	chomp($plus=<INFASTAQ>);
	chomp($Quality=<INFASTAQ>);
	$trimSeq = substr($Quality, $trim5p);   
	 $trimSeq = substr($trimSeq, 0, -$trim3p) unless $trim3p == 0;
	print OUTFASTAQ "+\n$trimSeq\n";
	
	
	}
	foreach my $uniq(keys %Unique)
	{
	my $val=$Unique{$uniq};
	print OUTREPORT "$uniq $val\n" ;
	}
print OUTCOMPLEXIVITY "Complexivity\tLength\tFreq\n" ;

	foreach my $Complex(sort keys %Complexivity)
	{
		foreach my $length(keys %{$Complexivity{$Complex}})
			{
			print OUTCOMPLEXIVITY "$Complex\t$length\t$Complexivity{$Complex}{$length}\n" ;
		}	
	}
	
		print STDERR "\nTotal Reads $cont \n";
	
